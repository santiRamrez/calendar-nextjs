import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import Link from 'next/link'

/***** React Hooks *****/
import React, { useState, useEffect, useRef } from "react";

/****** Layout  ******/
import Dashboard from '../layout/dashboard'
import Sidebar from '../layout/sidebar'
import Profile from '../layout/profile'
import Stack from '../layout/stack'
import Headers from '../layout/headers'
import Calendar from '../layout/calendar'

/****** Components  ******/
import CalendarUI from '../components/calendar/calendar'
import Agenda from '../components/agenda/agenda'

/** Utils **/
import getCurrentDate from '@/utils/getCurrentDate'
import monthToNumber from '@/utils/monthToNumber';
import HttpsReq  from '@/utils/HttpsReq' //this is a class and must be initialized

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const dt = new Date()
  const startReq = new HttpsReq()

  // State of this component
  const [data, setData] = useState()
  const [showAgenda, setShowAgenda] = useState(false)
  const [selectedDate, setSelectedDate] = useState("0")
  const [date, setDate] = useState({
    "month": dt.toLocaleString('en-uk', {month:'long'}),
    "year": dt.getFullYear(),
  })
  const [monthData, setMonthData] = useState({"month": "", "listActivities":[]})
  const [numMonth, setNumMonth] = useState(`${monthToNumber(date.month)}` )


  useEffect(() => {
    const pattern = numMonth.length === 2 ? numMonth : `0${numMonth}`
    startReq.getAll("dates")
    .then((response) => {
            if (response) {
              setData(response)
              //Filter the dates of the current month
              const filter = response.filter((rec) => {
                  let splitDate = rec.date.split("/")
                  return splitDate[0] === pattern ? true : false
              })
              setMonthData({
                "month": date.month,
                "listActivities": filter
              })
          }
      })

  }, [date])

  const closeAgenda = () => {
    setShowAgenda(false)
    setSelectedDate("0")
  }

  const watchChanges = (d) => {
      if (d.date) {
        //If there is a date, is bc the user has clicked on a date
        setSelectedDate(prev => {
          if(d.date !== prev) {
            return d.date
          }
        })
      }
      if(d.month) {
        const n = monthToNumber(d.month).toString().length > 1 ? `0${monthToNumber(d.month)}` : monthToNumber(d.month).toString()
        setNumMonth((prev) =>  prev !== n ? n : prev)
      }

    setDate(d)
  }

  return (
    <>
      <Head>
        <title>Calendar</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.container}>
          <Sidebar>
            <Profile/>
            <Stack />
          </Sidebar>
          <Dashboard>
            <Agenda show={showAgenda} month={numMonth.length === 2 ? numMonth : `0${numMonth}`} year={date.year} data={monthData.listActivities} totalRecords={data? data.length : 0} chosenDate={selectedDate} handleClickBack={closeAgenda}/> 
            <Headers />
            <Calendar >
              <CalendarUI data={monthData.listActivities} month={date.month} year={date.year} sendDate={(date) => watchChanges(date)} showAgenda={(bol) => setShowAgenda(bol)}/>
            </Calendar>
          </Dashboard>
      </div>
    </>
  )
}
